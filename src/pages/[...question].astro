---
import Layout from "../layouts/Layout.astro";
import apiData from "../data/api-data";
import {
  createBigObjectDataForInBuildTime,
  createQuestionUrl,
  getFullUrl,
  mapApiData,
} from "../utils/utils";
import type { ApiDataItem, QuestionPageData } from "../store/store";
import AnswerAbc from "../reactComponents/AnswerAbc";
import AnswerYesNo from "../reactComponents/AnswerYesNo";
import Media from "../reactComponents/Media";
import PrevNextQuestion from "../reactComponents/PrevNextQuestion";

interface ArrayToGeneratePages {
  params: {
    question: string;
  };
  props: {
    questionPageData: QuestionPageData;
  };
}

export async function getStaticPaths() {
  const bigData = createBigObjectDataForInBuildTime(apiData);
  const { allCategories } = bigData;

  const arrayToGeneratePages: ArrayToGeneratePages[] = [];

  // allCategories.forEach((category) => {
  ["b"].forEach((category) => {
    const arrayToGeneratePagesPerCategory = mapApiData(apiData as ApiDataItem[])
      .filter((q) => q.categories.includes(category))
      .map((q, index) => {
        const questionPageData: QuestionPageData = {
          ...q,
          slug: createQuestionUrl(q, category),
          category,
          prevSlug: null,
          nextSlug: null,
        };

        return {
          params: { question: createQuestionUrl(q, category) },
          props: { questionPageData },
        };
      });

    arrayToGeneratePages.push(...arrayToGeneratePagesPerCategory);
  });

  const arrayToGeneratePagesWithPrevNext = arrayToGeneratePages.map(
    (page, index) => {
      const prevPage = arrayToGeneratePages[index - 1];
      const nextPage = arrayToGeneratePages[index + 1];

      return {
        ...page,
        props: {
          ...page.props,
          questionPageData: {
            ...page.props.questionPageData,
            prevSlug: prevPage ? getFullUrl(prevPage.params.question) : null,
            nextSlug: nextPage ? getFullUrl(nextPage.params.question) : null,
          },
        },
      };
    }
  );

  return arrayToGeneratePagesWithPrevNext;
}

const questionPageData: QuestionPageData = Astro.props.questionPageData;
const { id, text, category, score, media, isVideo, prevSlug, nextSlug } =
  questionPageData;
---

<Layout>
  <div class="row">
    <div class="col-12 col-lg-6">
      <div class="QUESTION-INFO row mb-2 text-center">
        <div class="col-3">
          <div
            class="text-secondary h-100 d-flex justify-content-center align-items-center"
          >
            <span> {id}</span>
          </div>
        </div>
        <div class="col-3">
          <div
            class="text-secondary h-100 d-flex justify-content-center align-items-center"
          >
            <span> kat: {category.toUpperCase()}</span>
          </div>
        </div>
        <div class="col-3">
          <div
            class="text-secondary h-100 d-flex justify-content-center align-items-center"
          >
            <span> pkt: {score}</span>
          </div>
        </div>

        <div class="col-3">
          <div
            class="text-secondary h-100 d-flex justify-content-center align-items-center"
          >
            <span class="click-to-go-full-screen">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                class="bi bi-arrows-fullscreen"
                viewBox="0 0 16 16"
              >
                <path
                  fill-rule="evenodd"
                  d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344 0a.5.5 0 0 1 .707 0l4.096 4.096V11.5a.5.5 0 1 1 1 0v3.975a.5.5 0 0 1-.5.5H11.5a.5.5 0 0 1 0-1h2.768l-4.096-4.096a.5.5 0 0 1 0-.707zm0-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707zm-4.344 0a.5.5 0 0 1-.707 0L1.025 1.732V4.5a.5.5 0 0 1-1 0V.525a.5.5 0 0 1 .5-.5H4.5a.5.5 0 0 1 0 1H1.732l4.096 4.096a.5.5 0 0 1 0 .707z"
                ></path>
              </svg>
            </span>
          </div>
        </div>
      </div>

      <Media client:visible text={text} media={media} size="large" />

      <!-- ROW ROW QUESTION TEXT -->
      <div class="row">
        <div class="col">
          <h1 class="display-6 text-start shadow-bottom">
            {text}
          </h1>
        </div>
      </div>

      <AnswerAbc client:visible question={questionPageData} />

      <AnswerYesNo client:visible question={questionPageData} />

      <PrevNextQuestion question={questionPageData} />

      <!-- ROW ROW VOTE HEADLINE -->
      <div class="row">
        <div class="col">
          <div class="small text-center">
            <p>
              <strong> Oceń znajomość tego pytania:</strong>
              <br />
              <span>(będziesz mógł przeglądać ocenione pytania)</span>
            </p>
          </div>
        </div>
      </div>

      <!-- ROW ROW -->
      <div class="row mb-2">
        <!-- PROGRESS  -->
        <div class="col">
          <h2>Twoje postępy w nauce:</h2>
          <a href="#" class="btn btn-success w-100 d-block mb-2"
            >Dobrze odpowiedziałeś na 0 pytań.
            <u>zobacz.</u>
          </a>
          <a href="#" class="btn btn-danger w-100 d-block mb-2"
            >Średnio odpowiedziałeś na 0 pytań.
            <u>zobacz.</u>
          </a>
        </div>
      </div>

      <div class="row mb-3">
        <div class="col text-start">
          <h2>Wyjaśnienie pytania z testów na prawo jazdy:</h2>

          <div>
            <p>
              Przejeżdżając obok tramwaju który zatrzymał się na przystanku
              należy ustąpić pierwszeństwa pieszym chcącym wsiąść i wysiąść z
              pojazdu.
            </p>
          </div>
          <p></p>
          <p>ustawa108 art3 art3ust1pktart26ust6</p>
          <div>[object Object]</div>
        </div>
      </div>

      <div class="row">
        <div class="col">
          <p>
            To pytanie należy do kategorii <span>{category.toUpperCase()}</span>
            , testów na prawo jazdy z 2023 roku.
            <a href="#"> Zmień kategorię prawa jazdy.</a>
          </p>
        </div>
      </div>

      <!-- <div class="row">
        <div class="col">
          <h2>Szczegóły dotyczące tego pytania testowego:</h2>
          <div class="table-responsive">
            <table class="table table-dark">
              <caption
                >Powyższa tabela przedstawia szegółowe informacje dotyczące
                pytania z testów na prawo jazdy. Informacje są aktualne w lutym
                2023 roku.</caption
              >
              <thead>
                <tr>
                  <th scope="col">Co?</th>
                  <th scope="col">Info!</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <th scope="row">Id w bazie danych ministerstwa transportu</th>
                  <td> <span>id</span></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div> -->

      <!-- ROW ROW -->
      <div class="row">
        <div class="col">
          <div class="mt-5 pb-5 text-start">
            <p>
              Pamiętaj, że jedno konkretne pytanie z
              <strong> testów na prawo jazdy aktualnych w 2023</strong>
              może należeć do wielu różnych kategorii prawa jazdy. To pytanie testowe
              należy to kategorii a,a1,a2
            </p>
            <p>
              Dostępne kategorie pytań z testów na prawo jazdy w lutym 2023 to
              <strong>a,a1,a2!</strong>
            </p>
          </div>
        </div>
      </div>

      <!-- ROW ROW -->
      <div class="row mb-2">
        <!-- OTHER QUESTIONS -->
        <div class="col">
          <h2>Zobacz też inne pytania testowe!</h2>
          ...
        </div>
      </div>
    </div>
  </div>
</Layout>

<style is:global>
  /* webkit requires explicit width, height = 100% of sceeen */
  /* webkit also takes margin into account in full screen also - so margin should be removed (otherwise black areas will be seen) */

  .full-screen-wrapper:-webkit-full-screen {
    overflow: scroll !important;
    background-color: white !important;
    margin: 0;
    width: 100%;
    height: 100%;
    padding: 0.5rem;
    padding-top: 4rem;
  }

  .full-screen-wrapper:-moz-full-screen {
    overflow: scroll !important;
    background-color: white !important;
    margin: 0;
    width: 100%;
    height: 100%;
    padding: 0.5rem;
    padding-top: 4rem;
  }

  .full-screen-wrapper:-ms-fullscreen {
    overflow: scroll !important;
    background-color: white !important;
    margin: 0;
    width: 100%;
    height: 100%;
    padding: 0.5rem;
    padding-top: 4rem;
  }

  .full-screen-wrapper:fullscreen {
    overflow: scroll !important;
    background-color: white !important;
    margin: 0;
    width: 100%;
    height: 100%;
    padding: 0.5rem;
    padding-top: 4rem;
  }
</style>

<script>
  const fullScreenButtons = document.querySelectorAll(
    ".click-to-go-full-screen"
  ) as NodeListOf<HTMLElement>;

  fullScreenButtons.forEach((fullScreenButton) => {
    fullScreenButton.addEventListener("click", () => {
      // DOM element which needs to enter fullscreen mode
      const element = document.querySelector(".full-screen-wrapper");

      console.log("go full screen");

      element
        ?.requestFullscreen()
        .then(function () {
          // element has entered fullscreen mode successfully
        })
        .catch(function (error) {
          // element could not enter fullscreen mode
          // error message
          console.log(error.message);
        });
    });
  });

  // fullScreenButton?.addEventListener("click", () => {
  //   // DOM element which needs to enter fullscreen mode
  //   const element = document.querySelector(".full-screen-wrapper");

  //   console.log("go full screen")

  //   element
  //     ?.requestFullscreen()
  //     .then(function () {
  //       // element has entered fullscreen mode successfully
  //     })
  //     .catch(function (error) {
  //       // element could not enter fullscreen mode
  //       // error message
  //       console.log(error.message);
  //     });
  // });
</script>
