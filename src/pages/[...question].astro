---
import Layout from "../layouts/Layout.astro";
import apiData from "../data/api-data";
import { createQuestionUrl, getFullUrl, mapApiData } from "../utils/utils";
import type { ApiDataItem, QuestionPageData } from "../store/store";

export async function getStaticPaths() {
  const categories = [..."a,b,c,d,t,am,a1,a2,b1,c1,d1,z".split(",")];

  const arrayToGeneratePages: any[] = [];

  categories.forEach((category) => {
    const arrayToGeneratePagesPerCategory = mapApiData(apiData as ApiDataItem[])
      .filter((q) => q.categories.includes(category))
      .map((q, index) => {
        const questionPageData: QuestionPageData = {
          ...q,
          slug: createQuestionUrl(q, category),
          category,
          prevSlug: null,
          nextSlug: null,
        };

        return {
          params: { question: createQuestionUrl(q, category) },
          props: { questionPageData },
        };
      });
    arrayToGeneratePages.push(...arrayToGeneratePagesPerCategory);
  });

  const arrayToGeneratePagesWithPrevNext = arrayToGeneratePages.map(
    (page, index) => {
      const prevPage = arrayToGeneratePages[index - 1];
      const nextPage = arrayToGeneratePages[index + 1];

      return {
        ...page,
        props: {
          ...page.props,
          questionPageData: {
            ...page.props.questionPageData,
            prevSlug: prevPage ? getFullUrl(prevPage.params.question) : null,
            nextSlug: nextPage ? getFullUrl(nextPage.params.question) : null,
          },
        },
      };
    }
  );

  // console log makes build long ??
  // arrayToGeneratePagesWithPrevNext.map((page, index) => {
  //   console.log(
  //     index,
  //     page.props.questionPageData.slug,
  //     page.props.questionPageData.prevSlug,
  //     page.props.questionPageData.nextSlug
  //   );

  //   return page;
  // });

  return arrayToGeneratePagesWithPrevNext;
}

const { id, text, category, prevSlug, nextSlug } = Astro.props.questionPageData;
---

<Layout>
  <button id="full-screen">full screen</button>
  <div id="wrapper">
    <p><a href={prevSlug}>poprzednie</a> | <a href={nextSlug}>nastÄ™pne</a></p>
    <h2>Kategoria: <strong>{category}</strong>, id: {id}</h2>
    <h1>{text}</h1>

    <pre>{JSON.stringify( Astro.params, null,2)}</pre>
    <pre>{JSON.stringify( Astro.props, null,2)}</pre>
  </div>
</Layout>

<style>
  /* webkit requires explicit width, height = 100% of sceeen */
  /* webkit also takes margin into account in full screen also - so margin should be removed (otherwise black areas will be seen) */
  #wrapper:-webkit-full-screen {
    overflow: scroll !important;

    width: 100%;
    height: 100%;
    background-color: white;
    margin: 0;
  }

  #wrapper:-moz-full-screen {
    overflow: scroll !important;

    background-color: white;
    margin: 0;
  }

  #wrapper:-ms-fullscreen {
    overflow: scroll !important;

    background-color: white;
    margin: 0;
  }

  /* W3C proposal that will eventually come in all browsers */
  #wrapper:fullscreen {
    overflow: scroll !important;
    background-color: white;
    margin: 0;
  }
</style>

<script>
  const fullScreenButton = document.querySelector("#full-screen");

  fullScreenButton?.addEventListener("click", () => {
    // DOM element which needs to enter fullscreen mode
    const element = document.querySelector("#wrapper");

    element
      ?.requestFullscreen()
      .then(function () {
        // element has entered fullscreen mode successfully
      })
      .catch(function (error) {
        // element could not enter fullscreen mode
        // error message
        console.log(error.message);
      });
  });
</script>
