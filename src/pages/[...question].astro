---
import CurrentYear from "../reactComponents/CurrentYear";
import Layout from "../layouts/Layout.astro";
import apiData from "../data/api-data";
import masterQuestionsJson from "../data/masterQuestions.json";
import { createBigObjectDataForBuildTime, createQuestionUrl, getFullUrl, mapApiData } from "../utils/utils";
import type { ApiDataItem, QuestionPageData } from "../store/types";
import AnswerAbc from "../reactComponents/AnswerAbc";
import AnswerYesNo from "../reactComponents/AnswerYesNo";
import Media from "../reactComponents/Media";
import PrevNextQuestion from "../reactComponents/PrevNextQuestion";
import QuestionText from "../reactComponents/QuestionText";
import QuestionTable from "../reactComponents/QuestionTable";
import GivenAnswers from "../reactComponents/GivenAnswers";
import { URLS } from "../urls/urls";

interface ArrayToGeneratePages {
  params: {
    question: string;
  };
  props: {
    questionPageData: QuestionPageData;
  };
}

export async function getStaticPaths() {
  const bigData = createBigObjectDataForBuildTime(apiData);
  const explanations = masterQuestionsJson.allQuestions;

  const { allCategories } = bigData;

  const arrayToGeneratePages: ArrayToGeneratePages[] = [];

  // allCategories.forEach((category) => {
  ["b"].forEach((category) => {
    const arrayToGeneratePagesPerCategory = mapApiData(apiData as ApiDataItem[])
      .filter((q) => q.categories.includes(category))
      .map((q) => {
        const expls = explanations.find((e) => e.id === q.id)?.expl || [];
        const lows = explanations.find((e) => e.id === q.id)?.low || [];

        const questionPageData: QuestionPageData = {
          ...q,
          slug: createQuestionUrl(q, category),
          category,
          prevSlug: "#",
          nextSlug: "#",
          expls: typeof expls === "string" ? [expls] : expls,
          lows,
        };

        return {
          params: { question: createQuestionUrl(q, category) },
          props: { questionPageData, allCategories },
        };
      });

    arrayToGeneratePages.push(...arrayToGeneratePagesPerCategory);
  });

  const arrayToGeneratePagesWithPrevNext = arrayToGeneratePages.map((page, index) => {
    const prevPage = arrayToGeneratePages[index - 1];
    const nextPage = arrayToGeneratePages[index + 1];

    return {
      ...page,
      props: {
        ...page.props,
        questionPageData: {
          ...page.props.questionPageData,
          prevSlug: prevPage ? getFullUrl(prevPage.params.question) : null,
          nextSlug: nextPage ? getFullUrl(nextPage.params.question) : null,
        },
      },
    };
  });

  return arrayToGeneratePagesWithPrevNext;
}

const questionPageData: QuestionPageData = Astro.props.questionPageData;
const allCategories = Astro.props.allCategories;
const { id, text, category, score, media, isVideo, prevSlug, nextSlug, expls, lows } = questionPageData;

const currentYear = new Date().getFullYear();
---

<Layout title={`${text} | Darmowe testy na prawo jazdy ${currentYear}`}>
  <div class="row">
    <div class="col-12 col-lg-6">
      <div class="row mb-2">
        {
          [
            // { label: id },
            { label: `kat: ${category.toUpperCase()}` },
            { label: `pkt: ${score}` },
            // { label: <span style={{cursor: "pointer"}}>zgłoś błąd<i class="bi bi-flag"></i></span>  },
          ].map(({ label }) => (
            <div class="col-3">
              <div class="text-secondary h-100 d-flex justify-content-center align-items-center">
                <span>{label}</span>
              </div>
            </div>
          ))
        }
      </div>

      

      <Media client:load text={text} media={media} size="large" showControls={true} />

      <QuestionText client:load question={questionPageData} />

      <AnswerAbc client:load question={questionPageData} />

      <AnswerYesNo client:load question={questionPageData} />

      <PrevNextQuestion client:load question={questionPageData} />

      <!-- <div class="row mb-3">
        <div class="col">
          <div class="small text-center">
            <p class="mb-0"><strong> Oceń znajomość tego pytania:</strong></p>
            <p>(będziesz mógł przeglądać ocenione pytania)</p>
          </div>
        </div>
      </div> -->

      <!-- <div class="row mb-3">
         <div class="col">
          <h2>Twoje postępy w nauce:</h2>
          <a href="#" class="btn btn-success w-100 d-block mb-2"
            >Dobrze odpowiedziałeś na 0 pytań.
            <u>zobacz.</u>
          </a>
          <a href="#" class="btn btn-danger w-100 d-block mb-2"
            >Średnio odpowiedziałeś na 0 pytań.
            <u>zobacz.</u>
          </a>
        </div>
      </div> -->

      <div class="row mb-3">
        <div class="col text-start">
          <h2>Wyjaśnienie pytania z testów na prawo jazdy:</h2>

          <div>
            <!-- <p class="small">expls.length === {expls.length}</p> -->
            <div>{expls.map((expl) => <p>{expl}</p>)}</div>
          </div>

          <div>
            <!-- <p class="small">lows.length === {lows.length}</p> -->

            {
              lows.map((article) => {
                return (
                  <div class="container my-3">
                    <p>{article.title}</p>
                    {article.artContent.map((content: any) => (
                      <div class="my-4">
                        <p>
                          <span class="fw-bold">{content.title}</span> <span>{content.text}</span>
                        </p>
                      </div>
                    ))}
                  </div>
                );
              })
            }

            <!-- <pre>{JSON.stringify(lows,null,2)}</pre> -->
          </div>
        </div>

        <!-- <div class="row mb-3">
        <div class="col text-start">
          <h2>Wyjaśnienie pytania z testów na prawo jazdy:</h2>

          <div>
            <p>
              Przejeżdżając obok tramwaju który zatrzymał się na przystanku
              należy ustąpić pierwszeństwa pieszym chcącym wsiąść i wysiąść z
              pojazdu.
            </p>
          </div>
          <p></p>
          <p>ustawa108 art3 art3ust1pktart26ust6</p>
          <div>[object Object]</div>
        </div>
      </div> -->

        <div class="row">
          <div class="col">
            <p>
              To pytanie należy do kategorii <strong>{category.toUpperCase()},</strong>
              testów na prawo jazdy z <CurrentYear /> roku.
            </p>
            <p>
              <a href={URLS.DRIVING_LICENSE_CATEGIRIES} class="text-decoration-none">
                Zmień domyślną kategorię pytań z testów na prawo jazdy jaką chcesz się uczyć!
              </a>
            </p>
          </div>
        </div>

        <div class="row mb-3">
          <div class="col">
            <QuestionTable client:load question={questionPageData} />
          </div>
        </div>

        <!-- <div class="row">
        <div class="col">
          <h2>Szczegóły dotyczące tego pytania testowego:</h2>
          <div class="table-responsive">
            <table class="table table-dark">
              <caption
                >Powyższa tabela przedstawia szegółowe informacje dotyczące
                pytania z testów na prawo jazdy. Informacje są aktualne w lutym
                2023 roku.</caption
              >
              <thead>
                <tr>
                  <th scope="col">Co?</th>
                  <th scope="col">Info!</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <th scope="row">Id w bazie danych ministerstwa transportu</th>
                  <td> <span>id</span></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div> -->

        <!-- ROW ROW -->
        <div class="row">
          <div class="col">
            <div class="mt-5 pb-5 text-start">
              <p>
                Pamiętaj, że jedno konkretne pytanie z
                <strong> testów na prawo jazdy aktualnych w <CurrentYear client:load /></strong>
                może należeć do wielu różnych kategorii prawa jazdy. To pytanie testowe należy to kategorii {
                  questionPageData.categories.join(", ").toUpperCase()
                }
              </p>
              <p>
                Wszystkie dostępne kategorie pytań z testów na prawo jazdy w lutym <CurrentYear client:load /> to
                <strong>{allCategories.join(", ").toUpperCase()}</strong>
              </p>
            </div>
          </div>
        </div>

        <!-- <div class="row mb-3">
        <div class="col">
          <h2>Zobacz też inne pytania testowe!</h2>
          ...
        </div>
      </div> -->

        <p>
          <a
            href={`https://poznaj-testy.pl/${createQuestionUrl(questionPageData, "b")}`}
            target="_blank"
            rel="noopener noreferrer">{`https://poznaj-testy.pl/${createQuestionUrl(questionPageData, "b")}`}</a
          >
        </p>
      </div>
    </div>

    <!-- RIGHT SIDEBAR  -->
    <div class="col-12 col-lg-6 border">
      <GivenAnswers client:load />
    </div>
  </div>
</Layout>
