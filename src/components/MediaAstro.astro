---
import { MEDIA_HOST, MEDIA_SIZE } from "../settings/settings";

export interface MediaProps {
  t: string;
  m: string;
}

const { t, m = "" } = Astro.props as MediaProps;
const isVideo = m.includes(".mp4");

const mediaUrl = m ? MEDIA_HOST + MEDIA_SIZE.large + m : "/placeholder.png";
---

<!-- MEDIA START -->
<div class="MEDIA row">
  <div class="col p-0 p-lg-3 pb-lg-0">
    {
      isVideo ? (
        <div data-selector="video">
          <div class="position-relative">
            <video
              style={{ cursor: "pointer" }}
              class="w-100 shadow border border-dark"
              src={mediaUrl}
              onerror="this.onerror=null;this.src='/placeholder.mp4';"
              controls
            >
              <p>{t}</p>
            </video>
            <div
              data-selector="play-icon"
              class="position-absolute d-none"
              style={{ top: "50%", left: "50%" }}
            >
              <div style={{ transform: "translate(-50%,-50%)" }}>
                <i
                  style={{ fontSize: "2rem", cursor: "pointer" }}
                  class="larger bi bi-play-circle"
                />
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div class="position-relative">
          <img
            class="w-100 shadow border border-dark img-fluid"
            src={mediaUrl}
            onerror="this.onerror=null;this.src='/placeholder.png';"
            alt={t}
          />
        </div>
      )
    }
  </div>
</div>
<!-- MEDIA END -->

<script>
  const videoWrappers = document.querySelectorAll(
    "[data-selector=video]"
  ) as NodeListOf<HTMLDivElement>;

  videoWrappers.forEach((videoWrapper, i) => {
    const playIcon = videoWrapper.querySelector(
      "[data-selector=play-icon]"
    ) as HTMLDivElement;

    const video = videoWrapper.querySelector("video") as HTMLVideoElement;
    console.log("video", i, video);

    video?.addEventListener("canplay", async () => {
      console.log("video canplay");
      await video.play();
      video.controls = false;
      playIcon.classList.add("d-none");
    });

    video?.addEventListener("pause", () => {
      console.log("video paused");
      playIcon.classList.remove("d-none");
      // playIcon.classList.add("d-block")
    });

    videoWrapper.addEventListener("click", async () => {
      console.log("video clicked");
      if (video.paused) {
        await video.play();
        playIcon.classList.add("d-none");
      } else {
        video.pause();
      }
    });
  });
</script>
